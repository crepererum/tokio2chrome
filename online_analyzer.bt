BEGIN
{
    @ok = 1;

    if ($# != 1) {
        printf("Usage: bpftrace schedule_latency.bt <PID>\n");
        @ok = 0;
        exit();
    }

    printf("capturing data\n");
    printf("press CTRL-C to stop\n");
}

usdt:/home/mneumann/src/influxdb_iox/target/quick-release/influxdb_iox:tokio:task_schedule_start
/pid == $1/
{
    $now = nsecs();

    @schedule_start[arg0] = $now;
}

usdt:/home/mneumann/src/influxdb_iox/target/quick-release/influxdb_iox:tokio:task_poll_begin
/pid == $1/
{
    $now = nsecs();

    if (@schedule_start[arg0]) {
        @schedule_latency_usecs = hist(($now - @schedule_start[arg0]) / 1000);
        delete(@schedule_start[arg0]);
    }

    @poll_start[arg0] = $now;
    @poll_blocking_duration[arg0] = (uint64)0;
    @thread_assignment[tid] = arg0;
}

usdt:/home/mneumann/src/influxdb_iox/target/quick-release/influxdb_iox:tokio:task_blocking_begin
/pid == $1 && @thread_assignment[tid]/
{
    $now = nsecs();

    @blocking_start[tid] = $now;
}

usdt:/home/mneumann/src/influxdb_iox/target/quick-release/influxdb_iox:tokio:task_blocking_end
/pid == $1 && @blocking_start[tid]/
{
    $now = nsecs();

    $d = $now - @blocking_start[tid];
    @poll_blocking_duration[@thread_assignment[tid]] += $d;
    @blocking_duration_usecs = hist($d / 100);
    delete(@blocking_start[tid]);
}

usdt:/home/mneumann/src/influxdb_iox/target/quick-release/influxdb_iox:tokio:task_poll_end
/pid == $1 && @poll_start[arg0]/
{
    $now = nsecs();

    @poll_duration_usecs = hist(($now - @poll_start[arg0] - @poll_blocking_duration[arg0]) / 1000);

    delete(@poll_start[arg0]);
    delete(@poll_blocking_duration[arg0]);
    delete(@thread_assignment[tid]);
}

END
{
    if (@ok) {
        printf("results:\n");
    }

    clear(@ok);
    clear(@schedule_start);
    clear(@poll_start);
    clear(@poll_blocking_duration);
    clear(@blocking_start);
    clear(@thread_assignment);
}
