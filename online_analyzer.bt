BEGIN
{
    @ok = 1;

    if ($# != 1) {
        printf("Usage: bpftrace schedule_latency.bt <PID>\n");
        @ok = 0;
        exit();
    }

    printf("capturing data\n");
    printf("press CTRL-C to stop\n");
}

usdt:*:tokio:task_schedule_start
/pid == $1/
{
    $now = nsecs();

    if (@sleep_start[arg0]) {
        @sleep_duration_usecs = hist(($now - @sleep_start[arg0]) / 1000);
        delete(@sleep_start[arg0]);
    }

    @schedule_start[arg0] = $now;
}

usdt:*:tokio:task_poll_begin
/pid == $1/
{
    $now = nsecs();

    if (@schedule_start[arg0]) {
        @schedule_latency_usecs = hist(($now - @schedule_start[arg0]) / 1000);
        delete(@schedule_start[arg0]);
    }

    @poll_start[arg0] = $now;
    @poll_blocking_duration[arg0] = (uint64)0;
    @thread_assignment[tid] = arg0;
}

usdt:*:tokio:task_blocking_begin
/pid == $1 && @thread_assignment[tid]/
{
    $now = nsecs();

    @blocking_start[tid] = $now;
}

usdt:*:tokio:task_blocking_end
/pid == $1 && @blocking_start[tid]/
{
    $now = nsecs();

    $d = $now - @blocking_start[tid];
    @poll_blocking_duration[@thread_assignment[tid]] += $d;
    @blocking_duration_usecs = hist($d / 100);
    delete(@blocking_start[tid]);
}

usdt:*:tokio:task_poll_end
/pid == $1 && @poll_start[arg0]/
{
    $now = nsecs();

    @poll_duration_usecs = hist(($now - @poll_start[arg0] - @poll_blocking_duration[arg0]) / 1000);
    @sleep_start[arg0] = $now;

    delete(@poll_start[arg0]);
    delete(@poll_blocking_duration[arg0]);
    delete(@thread_assignment[tid]);
}

tracepoint:raw_syscalls:sys_enter
/(pid == $1) && (args.id != 219) && @thread_assignment[tid] && (!@blocking_start[tid])/
{
    $now = nsecs();

    @syscall_start[tid] = $now;

    // Futex WAIT detection:
    // - Syscall is 202 ( https://github.com/torvalds/linux/blob/v4.17/arch/x86/entry/syscalls/syscall_64.tbl )
    // - OP (without modifiers) is FUTEX_WAIT
    @syscall_is_futex_wait[tid] = (args.id == 202) && (((args.args[1]) & ((uint64)127)) == 0);
}

tracepoint:raw_syscalls:sys_exit
/pid == $1 && @syscall_start[tid] && args.id != 219/
{
    $now = nsecs();

    $d = ($now - @syscall_start[tid]);

    if (@syscall_is_futex_wait[tid]) {
        @syscall_futex_wait_during_poll_duration_usecs = hist($d / 1000);

        if (($d / 1000) > 100) {
            @lock_contention[ustack(5)] = count();
        }
    } else {
        @syscall_other_during_poll_duration_usecs = hist($d / 1000);
    }

    delete(@syscall_start[tid]);
    delete(@syscall_is_futex_wait[tid]);
}

END
{
    if (@ok) {
        printf("results:\n");
    }

    clear(@ok);
    clear(@schedule_start);
    clear(@poll_start);
    clear(@poll_blocking_duration);
    clear(@blocking_start);
    clear(@sleep_start);
    clear(@syscall_start);
    clear(@syscall_is_futex_wait);
    clear(@thread_assignment);
}
